package PatternWrapper;

public class CatWrapper extends Cat {
    private Cat original; // Создаем свойство original типа Cat для хранения ссылки на объект Cat

    public CatWrapper(Cat cat) { // Конструктор класса CatWrapper, принимающий объект типа Cat
        super(cat.getName());
//        super("cat.getName()"); // Вызываем конструктор родительского класса Cat с именем кота
//        Вызывая конструктор родительского класса (класса Cat) с именем кота, мы инициализируем объект Cat,
//        который будет храниться в свойстве original класса CatWrapper.
//        Это позволяет нам использовать методы класса Cat для работы с этим объектом.
//
//        Таким образом, когда вы создаете объект класса CatWrapper, вы передаете ему объект типа Cat,
//        и этот объект Cat становится доступным для обработки через свойство original класса CatWrapper.
//
//        Вызов конструктора родительского класса не дублирует объект Cat, а просто инициализирует его и сохраняет
//        ссылку на него в свойстве original.
//        Это позволяет нам использовать методы класса Cat для работы с этим объектом, а также добавляет возможности
//        класса CatWrapper, такие как добавление строки "Кот по имени" к имени кота.
//
//        Если бы мы не вызывали конструктор родительского класса, мы не смогли бы использовать методы класса Cat
//        для объекта, хранящегося в свойстве original.

        this.original = cat; // Инициализируем свойство original ссылкой на объект cat
    }

    public String getName() { // Метод getName для получения имени кота
        return "Кот по имени " + original.getName(); // Возвращаем строку "Кот по имени" и имя кота, хранящееся в объекте original
    }

    public void setName(String name) { // Метод setName для изменения имени кота
        original.setName(name); // Вызываем метод setName объекта original для изменения имени кота
    }
}
