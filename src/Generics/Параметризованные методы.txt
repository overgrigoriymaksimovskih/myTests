в обычном методе мы не можем передать параметры которые он не принимает:
//метод
public int makeRevision(int a, int b){
        return a + b;
    }
//можем вызвать только с аргументами int
Revisor revisor = new Revisor();
        int resultOfRevision = revisor.makeRevision(1,2);


Параметризированный метод выглядит так:
public <T1, T2> int makeRevision(T1 arg1, T2 arg2) {
        //тут какой то код
        return 2;
    }

Его можно вызвать с двумя аргументами любого типа:
//так
Revisor revisor = new Revisor();
        int resultOfRevision = revisor.makeRevision("любой аргумент", 9999);
//или так
Revisor revisor = new Revisor();
        int resultOfRevision = revisor.makeRevision("любой аргумент", new FruitStorageApplesStorage());
        //да что угодно можно туда пихать

Но смысла создавать параметризированные методы без указания типа принимаемых аргументов, ОСОБОГО СМЫСЛА НЕТ потому что
метод не знает заранее что в него будут передавать и в итоге у наших принимаемых аргументов (arg1 arg 2) можно будет
вызвать только методы которые есть у Object (типа то стринг, иквалс хэшкод)

Поэтому сначала создают абстрактный класс который имеет абстрактный метод а в параметризированный класс передают наследников
этого класса, гарантированно зная, что они будут иметь какую то реализацию этого метода

Поэтому создадим например абстрактный класс FruitStorage с абстрактным методом подсчета фруктов на складе унаследуем от него
классы Хранилища яблок хранилища персиков хранилища зеленых персиков каждый из них подсчитывает количество фруктов
которые в нем хранятся по своему но передав любой из них в РЕВИЗОР мы сможем взять это количество у каждого и обработать:
//передаем что угодно, что наследуется от ФруитСторадж и работаем с количеством фруктов
    public <T1 extends FruitStorage, T2 extends FruitStorage> int makeRevision(T1 arg1, T2 arg2) {
        return arg1.getFruitCount() + arg2.getFruitCount();
    }
// Вот так его можно вызвать
Revisor revisor = new Revisor();
        int resultOfRevision = revisor.makeRevision(new FruitStorageApplesStorage(22), new FruitStorageOrangesStorage(1000));



