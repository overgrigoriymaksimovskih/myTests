Когда мы создаем объект обычного класса тут все понятно
Cat cat = new Cat("Master", 12);
Конструктор и поля обычного класса выглядит так:
    String name;
    Integer age;

    public Cat(String name, Integer age) {
        this.name = name;
        this.age = age;
    }
Мы не можем передать в конструктор другие типы параметров
------------------------------------------------------------------------------------------------------------------------

Конструктор параметризированного класса выглядит так:
public class Cat<T1, T2>{
    T1 name;
    T2 age;

    public Cat(T1 name, T2 age) {
        this.name = name;
        this.age = age;
    }
}
При вызове этого конструктора мы заранее в даймонд синтаксисе <> указываем типы параметров для конструктора
Cat<String, Integer> cat = new Cat<>("Master", 12);

Тут при компиляции, везде где мы поставили T1, T2, ... Tn будут заменены на те типы параметров которые мы указали в даймонд
синтаксисе при создании класса
Так при создании объекта класса можно например сделать так
Cat<String, String> cat = new Cat<>("Master", "12");
В самом классе ничего при этом менять не потребуется

Если нужно указать что какой то из параметров конструктора должен быть не любого типа, можно все нужные типы унаследовать
от одного родителя и использовать extends. Например добавим поле race(расса), которое может быть либо Tiger либо Lion либо Cat
для этого классы Lion Tiger Cat сделаем extends Race а в конструкторе класса напишем:
public class Cat<T1, T2, T3 extends Race>{
    T1 name;
    T2 age;
    T3 race;

    public Cat(T1 name, T2 age, T3 race) {
        this.name = name;
        this.age = age;
        this race = race;
    }
}
теперь ничего кроме предков Race нельзя передать третьим параметром

------------------------------------------------------------------------------------------------------------------------
В методы параметризованного класса можно так же передавать аргументы типа которым параметризован класс

public class Printer1<T>{
    private String string = "";

    public String getString() {
        return string;
    }
    public void addToString (T t){
        if(this.string.equals("")){
            this.string = this.string + t.toString();
        }else{
            this.string = this.string + " - " + t.toString();
        }
    }
}