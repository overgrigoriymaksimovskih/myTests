package PatternAdapter.USB;

//  А вот и наш адаптер!
//
//  Что же делает класс CardReader и почему, собственно, он является адаптером?
//
//  Все просто. Адаптируемый класс (карта памяти) становится одним из полей адаптера. Это логично, ведь в реальной жизни
//  мы тоже вставляем карту внутрь кардридера, и она тоже становится его частью.
//
//  В отличие от карты памяти, у адаптера есть общий интерфейс с компьютером. У него есть USB-кабель, то есть он может
//  соединяться с другими устройствами по USB.
//
//  Поэтому в программе наш класс CardReader реализует интерфейс USB. Но что же происходит внутри этого метода?
//
//  А там происходит ровно то, что нам нужно! Адаптер делегирует выполнение работы нашей карте памяти. Ведь сам-то
//  адаптер ничего не делает, какого-то самостоятельного функционала у кардридера нет. Его задача — только связать
//  компьютер и карту памяти, чтобы карта могла сделать свою работу и скопировать файлы!
//
//  Наш адаптер позволяет ей сделать это, предоставив свой интерфейс (метод connectWithUsbCable()) для «нужд» карты
//  памяти.

public class CardReader implements USB {
    private MemoryCard memoryCard;

    public CardReader(MemoryCard memoryCard) {
        this.memoryCard = memoryCard;
    }

    @Override
    public void connectWithUsbCable() {
        this.memoryCard.insert();
        this.memoryCard.copyData();
    }
}
